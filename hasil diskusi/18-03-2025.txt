Langkah pertama untuk membuat drone adalah mempelajari bagaimana drone itu bekerja. Sehingga, digunakan PID model dengan 1 motor untuk mensimulasikan 1 axis dari drone.
Drone bisa terbang dengan memutar micromotor dengan kecepatan yang tinggi searah jarum jam (untuk propeller tipe CW) dan menghasilkan thrust atau gaya dorong sehingga drone akan terangkat. Untuk mengontrol drone, kecepatan micromotor harus dapat diatur. Sehingga diperlukan PWM dari controller. Namun, arus dari controller tidak cukup untuk menggerakan micromotor. Sehingga digunakanlah mosfet yang dihubungkan dengan sumber tegangan yang dapat menyediakan arus yang lebih besar.
Mosfet dibagi menjadi dua jenis, yaitu N-channel dan P-channel. Secara sederhana, N-channel digunakan setelah micromotor (memotong jalur GND micromotor) dengan tegangan positif. Sedangkan P-channel digunakan sebelum micromotor (memotong jalur VCC micromotor) dengan tegangan negatif.
Drone harus bisa melakukan penerbangan yang stabil sehingga ia bisa hover dengan baik. Maka dari itu, digunakan perhitungan PID dari libraries <ArduPID.h>. PID secara sederhana adalah usaha sistem melalui perhitungan propotional, integral dan derivative untuk mencapai setpoint yang ditentukan. PID memiliki 3 konstanta yaitu Kp, Ki, dan Kd yang masing-masing dapat diatur sebagai tuner dari PID itu sendiri.

P itu dia mengkalkulasikan nilai erorr saat ini. respon aksi nya sebanding dengan nilai erornya, kalo nilai selisih antara nilai setpoin dengan nilai aktual itu besar, akan menimbulkan aksi yang besar sehingga menyebabkan osilasi.  Selain itu, p bisa menimbulkan steady state error(SSE),posisi dmn sistem telah stabil tetapi masih ada nilai error(≠0).  Nahh untuk menambahkan kesempurnaan koreksi nilai errornya, ditambahlah parameter ;

I, yang mana dia bertugas ngepush nilai error agar mencapai setpoin, dengan cara menjumlahkan nilai error dari waktu ke waktu, sehingga bisa ngepush SSE agar menyentuh setpoin. tetapi, penggunaan I bisa menyebabkan sedikit overshoot dan bila terlalu besar bisa menyebabkan osilasi. oleh karena itu, meredam agar lebih halus lagi menggunakan parameter;

D yang mana dia menggunakan gradien, sehingga bisa memprediksi nilai error dan mencegah overshoot terjadi. juga jika ada kondisi SSE, D tidak bisa berperan, karena I yang bertugas menghilangkan SSE
